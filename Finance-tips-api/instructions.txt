==============================================
FINANCE-TIPS API - INSTRUCTIONS D'INSTALLATION
==============================================

## PRÉREQUIS
- Python 3.8 ou supérieur
- pip (gestionnaire de paquets Python)
- Virtualenv (recommandé)
- Git

## INSTALLATION EN DÉVELOPPEMENT

1. Cloner le projet :
   ```bash
   git clone https://github.com/votre-repo/Finance-tips-api.git
   cd Finance-tips-api
   ```

2. Créer un environnement virtuel :
   ```bash
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\Scripts\activate     # Windows
   ```

3. Installer les dépendances :
   ```bash
   pip install -r requirements.txt
   ```

4. Configurer les variables d'environnement :
   ```bash
   cp .env.example .env
   # Éditer .env avec vos valeurs
   ```

5. Créer les dossiers nécessaires :
   ```bash
   mkdir -p log statics/uploads
   ```

6. Initialiser la base de données :
   ```bash
   python -c "from app import app; app.app_context().push(); from config.db import db; db.create_all()"
   ```

7. Lancer l'application :
   ```bash
   python app.py
   ```

L'API sera accessible sur http://localhost:5000

## STRUCTURE DES ENDPOINTS

### Authentification
- POST /api/users/register - Inscription
- POST /api/users/login - Connexion

### Profil utilisateur
- GET /api/users/profile - Obtenir son profil (auth requise)
- PUT /api/users/profile - Modifier son profil (auth requise)
- DELETE /api/users/profile - Supprimer son compte (auth requise)

### Calculatrices financières
- POST /api/calculators/savings-plan - Plan d'épargne
- POST /api/calculators/loan-duration - Durée de remboursement
- POST /api/calculators/budget-simulation - Simulation de budget
- POST /api/calculators/zakat - Calcul de la Zakat
- GET /api/calculators/history - Historique des calculs (auth requise)
- GET /api/calculators/info - Informations sur les calculatrices

### Conseils financiers
- GET /api/tips - Liste des conseils
- GET /api/tips/<id> - Détail d'un conseil

## TESTS

Pour exécuter les tests :
```bash
pytest
```

Pour la couverture de code :
```bash
pytest --cov=.
```

## DÉPLOIEMENT EN PRODUCTION

1. Installer les dépendances de production :
   ```bash
   pip install -r requirements.txt
   ```

2. Configurer les variables d'environnement de production :
   - Utiliser une vraie SECRET_KEY
   - Configurer PostgreSQL au lieu de SQLite
   - Désactiver DEBUG
   - Configurer un serveur mail réel

3. Utiliser Gunicorn comme serveur WSGI :
   ```bash
   gunicorn -w 4 -b 0.0.0.0:8000 app:app
   ```

4. Configurer un reverse proxy (Nginx) :
   ```nginx
   server {
       listen 80;
       server_name api.finance-tips.com;
       
       location / {
           proxy_pass http://127.0.0.1:8000;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
       }
   }
   ```

5. Activer HTTPS avec Let's Encrypt :
   ```bash
   certbot --nginx -d api.finance-tips.com
   ```

## MIGRATIONS DE BASE DE DONNÉES

Pour gérer les migrations avec Alembic :

1. Initialiser Alembic :
   ```bash
   alembic init alembic
   ```

2. Créer une migration :
   ```bash
   alembic revision --autogenerate -m "Description"
   ```

3. Appliquer les migrations :
   ```bash
   alembic upgrade head
   ```

## SÉCURITÉ

- Toujours utiliser HTTPS en production
- Mettre à jour régulièrement les dépendances
- Utiliser des mots de passe forts pour la DB
- Configurer un firewall
- Limiter les tentatives de connexion
- Activer les logs de sécurité

## MONITORING

Recommandations pour le monitoring :
- Sentry pour les erreurs
- Prometheus + Grafana pour les métriques
- ELK Stack pour les logs
- Uptime Robot pour la disponibilité

## SUPPORT

Pour toute question ou problème :
- Ouvrir une issue sur GitHub
- Consulter la documentation API
- Contacter l'équipe de développement

==============================================